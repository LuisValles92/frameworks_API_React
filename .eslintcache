[{"C:\\xampp\\htdocs\\DAW\\frameworks_API_React\\src\\index.js":"1","C:\\xampp\\htdocs\\DAW\\frameworks_API_React\\src\\App.js":"2","C:\\xampp\\htdocs\\DAW\\frameworks_API_React\\src\\reportWebVitals.js":"3"},{"size":517,"mtime":1612135783996,"results":"4","hashOfConfig":"5"},{"size":9985,"mtime":1612138327159,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1612135783997,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1tyn5it",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\DAW\\frameworks_API_React\\src\\index.js",[],["16","17"],"C:\\xampp\\htdocs\\DAW\\frameworks_API_React\\src\\App.js",["18","19"],"// importamos useState, el hook para crear un state en nuestro componente\r\nimport React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction App() {\r\n    //direccion de la API\r\n    const baseUrl = \"http://localhost:5000/DAW/frameworks_API/\";\r\n\r\n    // useState recibe un parámetro: el valor inicial del estado (que será 0)\r\n    // y devuelve un array de dos posiciones:\r\n    //  la primera (count), tiene el valor del estado\r\n    //  la segunda (setCount), el método para actualizar el estado\r\n    //ejemplo        const [count, setCount] = useState(0)\r\n\r\n    {\r\n        /*<div>\r\n              <p>Has hecho click {count} veces</p>\r\n              // actualizamos el state al hacer click con setCount //\r\n              <button onClick={() => setCount(count + 1)}>\r\n                Haz click!\r\n              </button>\r\n            </div>*/\r\n    }\r\n\r\n    const [data, setData] = useState([]);\r\n    const [modalInsertar, setModalInsertar] = useState(false);\r\n    const [modalEditar, setModalEditar] = useState(false);\r\n    const [modalEliminar, setModalEliminar] = useState(false);\r\n    const [frameworkSeleccionado, setFrameworkSeleccionado] = useState({\r\n        id: '',\r\n        nombre: '',\r\n        lanzamiento: '',\r\n        desarrollador: ''\r\n    });\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target;\r\n        setFrameworkSeleccionado((prevState) => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }))\r\n        console.log(frameworkSeleccionado);\r\n    }\r\n\r\n    const abrirCerrarModalInsertar = () => {\r\n        setModalInsertar(!modalInsertar);\r\n    }\r\n\r\n    const abrirCerrarModalEditar = () => {\r\n        setModalEditar(!modalEditar);\r\n    }\r\n\r\n    const abrirCerrarModalEliminar = () => {\r\n        setModalEliminar(!modalEliminar);\r\n    }\r\n\r\n    const peticionGet = async() => {\r\n        await axios.get(baseUrl)\r\n            .then(response => {\r\n                setData(response.data);\r\n            }).catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const peticionPost = async() => {\r\n        var f = new FormData();\r\n        f.append(\"nombre\", frameworkSeleccionado.nombre);\r\n        f.append(\"lanzamiento\", frameworkSeleccionado.lanzamiento);\r\n        f.append(\"desarrollador\", frameworkSeleccionado.desarrollador);\r\n        f.append(\"METHOD\", \"POST\");\r\n        await axios.post(baseUrl, f)\r\n            .then(response => {\r\n                setData(data.concat(response.data));\r\n                //cerramos la ventana modal\r\n                abrirCerrarModalInsertar();\r\n                //refresco la tabla haciendo una peticion get\r\n                peticionGet();\r\n\r\n            }).catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const peticionPut = async() => {\r\n\r\n        //console.log(frameworkSeleccionado);\r\n\r\n        // Codificar nuestro framework como JSON\r\n        const frameworkJSON = JSON.stringify(frameworkSeleccionado);\r\n        // ¡Y enviarlo!\r\n\r\n        await axios.put(baseUrl, frameworkJSON, { params: { id: frameworkSeleccionado.id } })\r\n            .then(response => {\r\n                var dataNueva = data;\r\n                //lo siguiente es un bucle que recorre toda la tabla para encontrar el elemento\r\n                //seleccionado por el id\r\n                dataNueva.map(framework => {\r\n                    //console.log(framework.id);\r\n                    if (framework.id === frameworkSeleccionado.id) {\r\n                        framework.nombre = frameworkSeleccionado.nombre;\r\n                        framework.lanzamiento = frameworkSeleccionado.lanzamiento;\r\n                        framework.desarrollador = frameworkSeleccionado.desarrollador;\r\n                    }\r\n                });\r\n                console.log(dataNueva);\r\n                setData(dataNueva);\r\n                abrirCerrarModalEditar();\r\n                //refresco la tabla haciendo una peticion put\r\n                peticionGet();\r\n            }).catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    const peticionDelete = async() => {\r\n\r\n\r\n        axios.delete(baseUrl, { params: { id: frameworkSeleccionado.id } }).then(response => {\r\n\r\n            abrirCerrarModalEliminar();\r\n            //refresco la tabla haciendo una peticion delete\r\n            peticionGet();\r\n\r\n        }).catch(error => {\r\n            console.log(error);\r\n\r\n        })\r\n    }\r\n\r\n    const seleccionarFramework = (framework, caso) => {\r\n        setFrameworkSeleccionado(framework);\r\n\r\n        (caso === \"Editar\") ?\r\n        abrirCerrarModalEditar():\r\n            abrirCerrarModalEliminar()\r\n    }\r\n\r\n    useEffect(() => {\r\n        peticionGet();\r\n    }, [])\r\n\r\n    return ( <\r\n        div style = {\r\n            { textAlign: 'center' }\r\n        } >\r\n        <\r\n        br / >\r\n        <\r\n        button className = \"btn btn-success\"\r\n        onClick = {\r\n            () => abrirCerrarModalInsertar()\r\n        } > Insertar < /button> <\r\n        br / > < br / >\r\n        <\r\n        table className = \"table table-striped\" >\r\n        <\r\n        thead >\r\n        <\r\n        tr >\r\n        <\r\n        th > ID < /th> <\r\n        th > Nombre < /th> <\r\n        th > Lanzamiento < /th> <\r\n        th > Desarrollador < /th> <\r\n        th > Acciones < /th> < /\r\n        tr > <\r\n        /thead> <\r\n        tbody > {\r\n            data.map(framework => ( <\r\n                tr key = { framework.id } >\r\n                <\r\n                td > { framework.id } < /td> <\r\n                td > { framework.nombre } < /td> <\r\n                td > { framework.lanzamiento } < /td> <\r\n                td > { framework.desarrollador } < /td> <\r\n                td >\r\n                <\r\n                button className = \"btn btn-primary\"\r\n                onClick = {\r\n                    () => seleccionarFramework(framework, \"Editar\")\r\n                } > Editar < /button>  <\r\n                button className = \"btn btn-danger\"\r\n                onClick = {\r\n                    () => seleccionarFramework(framework, \"Eliminar\")\r\n                } > Eliminar < /button> < /\r\n                td > <\r\n                /tr>\r\n            ))\r\n        }\r\n\r\n\r\n        <\r\n        /tbody> \r\n\r\n        <\r\n        /table>\r\n\r\n\r\n        <\r\n        Modal isOpen = { modalInsertar } >\r\n        <\r\n        ModalHeader > Insertar Framework < /ModalHeader> <\r\n        ModalBody >\r\n        <\r\n        div className = \"form-group\" >\r\n        <\r\n        label > Nombre: < /label> <\r\n        br / >\r\n        <\r\n        input type = \"text\"\r\n        className = \"form-control\"\r\n        name = \"nombre\"\r\n        onChange = { handleChange }\r\n        /> <\r\n        br / >\r\n        <\r\n        label > Lanzamiento: < /label> <\r\n        br / >\r\n        <\r\n        input type = \"text\"\r\n        className = \"form-control\"\r\n        name = \"lanzamiento\"\r\n        onChange = { handleChange }\r\n        /> <\r\n        br / >\r\n        <\r\n        label > Desarrollador: < /label> <\r\n        br / >\r\n        <\r\n        input type = \"text\"\r\n        className = \"form-control\"\r\n        name = \"desarrollador\"\r\n        onChange = { handleChange }\r\n        /> <\r\n        br / >\r\n        <\r\n        /div> < /\r\n        ModalBody > <\r\n        ModalFooter >\r\n        <\r\n        button className = \"btn btn-primary\"\r\n        onClick = {\r\n            () => peticionPost()\r\n        } > Insertar < /button>{\"   \"} <\r\n        button className = \"btn btn-danger\"\r\n        onClick = {\r\n            () => abrirCerrarModalInsertar()\r\n        } > Cancelar < /button> < /\r\n        ModalFooter > <\r\n        /Modal>\r\n\r\n\r\n\r\n        <\r\n        Modal isOpen = { modalEditar } >\r\n        <\r\n        ModalHeader > Editar Framework < /ModalHeader> <\r\n        ModalBody >\r\n        <\r\n        div className = \"form-group\" >\r\n        <\r\n        label > Nombre: < /label> <\r\n        br / >\r\n        <\r\n        input type = \"text\"\r\n        className = \"form-control\"\r\n        name = \"nombre\"\r\n        onChange = { handleChange }\r\n        value = { frameworkSeleccionado && frameworkSeleccionado.nombre }\r\n        /> <\r\n        br / >\r\n        <\r\n        label > Lanzamiento: < /label> <\r\n        br / >\r\n        <\r\n        input type = \"text\"\r\n        className = \"form-control\"\r\n        name = \"lanzamiento\"\r\n        onChange = { handleChange }\r\n        value = { frameworkSeleccionado && frameworkSeleccionado.lanzamiento }\r\n        /> <\r\n        br / >\r\n        <\r\n        label > Desarrollador: < /label> <\r\n        br / >\r\n        <\r\n        input type = \"text\"\r\n        className = \"form-control\"\r\n        name = \"desarrollador\"\r\n        onChange = { handleChange }\r\n        value = { frameworkSeleccionado && frameworkSeleccionado.desarrollador }\r\n        /> <\r\n        br / >\r\n        <\r\n        /div> < /\r\n        ModalBody > <\r\n        ModalFooter >\r\n        <\r\n        button className = \"btn btn-primary\"\r\n        onClick = {\r\n            () => peticionPut()\r\n        } > Modificar < /button>{\"   \"} <\r\n        button className = \"btn btn-danger\"\r\n        onClick = {\r\n            () => abrirCerrarModalEditar()\r\n        } > Cancelar < /button> < /\r\n        ModalFooter > <\r\n        /Modal>\r\n\r\n        <\r\n        Modal isOpen = { modalEliminar } >\r\n        <\r\n        ModalBody > ¿Estás seguro que deseas eliminar el Framework { frameworkSeleccionado && frameworkSeleccionado.nombre } ?\r\n        <\r\n        /ModalBody> <\r\n        ModalFooter >\r\n        <\r\n        button className = \"btn btn-danger\"\r\n        onClick = {\r\n            () => peticionDelete()\r\n        } >\r\n        Sí <\r\n        /button> <\r\n        button className = \"btn btn-secondary\"\r\n        onClick = {\r\n            () => abrirCerrarModalEliminar()\r\n        } >\r\n        No <\r\n        /button> < /\r\n        ModalFooter > <\r\n        /Modal>\r\n\r\n        <\r\n        /div>\r\n    );\r\n}\r\n\r\nexport default App;","C:\\xampp\\htdocs\\DAW\\frameworks_API_React\\src\\reportWebVitals.js",[],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":18,"column":5,"nodeType":"26","messageId":"27","endLine":26,"endColumn":6},{"ruleId":"28","severity":1,"message":"29","line":101,"column":41,"nodeType":"30","messageId":"31","endLine":101,"endColumn":43},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]